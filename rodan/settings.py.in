"""
Rodan settings. It should be automatically configured by autoconf script.
"""
import os, sys


###############################################################################
## 1.a  General Django Configuration
###############################################################################
PROJECT_PATH = os.path.realpath(os.path.dirname(__file__))
TEST = 'test' in sys.argv
TEST_RUNNER = 'django.test.runner.DiscoverRunner'
DEBUG = @ENABLE_DEBUG@
TEMPLATE_DEBUG = DEBUG
if TEST and not DEBUG:
    from django.core.exceptions import ImproperlyConfigured
    raise ImproperlyConfigured("Testing requires DEBUG=True")
# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'America/Montreal'
# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'
SITE_ID = 1
# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True
# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True
# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = True
# Make this unique, and don't share it with anybody.
SECRET_KEY = '@SECRET_KEY@'
# Installed apps
INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',
    'ws4redis',
    'rodan',
    'django_extensions',
    'rest_framework',
    'rest_framework.authtoken',
    'djoser',
    'guardian',
    'corsheaders',
    'sortedm2m',
)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '@DB_NAME@',
        'USER': '@DB_USER@' if not TEST else '@DB_USER_TEST@',
        'PASSWORD': '@DB_PASSWORD@' if not TEST else '@DB_PASSWORD_TEST@',
        'HOST': '@DB_HOST@',
        'PORT': '@DB_PORT@',
    }
}
# Rodan DATA folder
# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = '@RODAN_DATA_DIR@'
# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = '/uploads/'

###############################################################################
## 1.b  General Rodan Configuration
###############################################################################
# Diva.js support
ENABLE_DIVA = @ENABLE_DIVA@
# Resource thumbnail
THUMBNAIL_EXT = 'jpg'
# Supported Workflow serialization versions -- see rodan.views.workflow.version_map
RODAN_WORKFLOW_SERIALIZATION_FORMAT_VERSION = 0.1
RODAN_RESULTS_PACKAGE_AUTO_EXPIRY_SECONDS = 30 * 24 * 60 * 60  # 30 days. NULL: never expire
RODAN_RUNJOB_WORKING_USER_EXPIRY_SECONDS = 15
DIVA_JPEG2000_CONVERTER = @DIVA_JPEG2000_CONVERTER@
DIVA_JPEG2000_CONVERTER_INPUT = @DIVA_JPEG2000_CONVERTER_INPUT@
DIVA_JPEG2000_CONVERTER_OUTPUT = @DIVA_JPEG2000_CONVERTER_OUTPUT@

###############################################################################
## 1.c  Rodan Job Package Registration
###############################################################################
# Job Packages
RODAN_JOB_PACKAGES = (
    "rodan.jobs.resource_distributor",
    "rodan.jobs.helloworld",
)
# Jobs that depend on binaries.
# If None, Rodan will call `which gm` to find it.
BIN_GM = @BIN_GM@
# If None, Rodan will call `which kdu_compress` to find it.
BIN_KDU_COMPRESS = @BIN_KDU_COMPRESS@
# If None, Rodan will call `which vips` to find it.
BIN_VIPS = @BIN_VIPS@
# If None, Rodan will call `which xmllint` to find it.
BIN_XMLLINT = @BIN_XMLLINT@


###############################################################################
## 1.d  Logging configuration (rodan.log, database.log)
###############################################################################
# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'rodan.log',
            'formatter': 'verbose'
        },
        'dblog': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'database.log',
            'formatter': 'verbose'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django': {
            'handlers': ['console'],
            'level': 'ERROR',
            #'level': 'DEBUG',
            'propagate': True,
        },
        'rodan': {
            'handlers': ['file'],
            'level': 'WARNING',
            'propagate': True,
        },
        'django.db.backends': {
            'level': 'DEBUG',
            'handlers': ['dblog'],
            'propagate': False,
        }
    }
}


###############################################################################
## 1.e  Email configuration
###############################################################################
# A sample email configuration. These parameters are used to send emails to
# the owner of WorkflowRuns, etc.
# To enable emailing, fill out email parameters below and set EMAIL_USE to True.
# See https://docs.djangoproject.com/en/1.10/topics/email/ for
# more details on how to customize your email configuration.
EMAIL_USE = False
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = @EMAIL_USERNAME@
EMAIL_HOST_PASSWORD = @EMAIL_PASSWORD@
EMAIL_PORT = 587


###############################################################################
## 2.a  Rodan Server Configuration
###############################################################################
# Django entrance
ROOT_URLCONF = 'rodan.urls'
# let Django know if the request is HTTPS
SECURE_PROXY_SSL_HEADER = ('HTTP_X_SCHEME', 'https')
# Allowed hosts
ALLOWED_HOSTS = [
    '@DOMAIN_NAME@'
]
# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
#     'django.template.loaders.eggs.Loader',
)
TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)
TEMPLATE_CONTEXT_PROCESSORS = (
    "django.contrib.auth.context_processors.auth",
    "django.core.context_processors.debug",
    "django.core.context_processors.media",
    "django.core.context_processors.static",
    "django.core.context_processors.csrf",
    "django.contrib.messages.context_processors.messages",
    'ws4redis.context_processors.default',
    # "rodan.context_processors.list_projects",
    # "rodan.context_processors.login_url",
)
# Middleware classes
MIDDLEWARE_CLASSES = (
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.gzip.GZipMiddleware',
    # Uncomment the next line for simple clickjacking protection:
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
)
if DEBUG:
    # we avoid unnecessary middlewares in production as they slows down the website.
    # for DEBUG mode, we would like to have Django admin which requires Session and Message.
    MIDDLEWARE_CLASSES = list(MIDDLEWARE_CLASSES) + [
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware'
    ]
FILE_UPLOAD_HANDLERS = (
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
)
# REST framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_METADATA_CLASS': 'rodan.views.RodanMetadata',
    'PAGINATE_BY': @PAGINATE_BY@,
    'MAX_PAGINATE_BY': @MAX_PAGINATE_BY@,
    'USE_ABSOLUTE_URLS': True,
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework.filters.DjangoObjectPermissionsFilter',
        'rest_framework.filters.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter'
    ),
    'DEFAULT_PAGINATION_CLASS': 'rodan.paginators.pagination.CustomPagination',
}
if DEBUG:
    # Enable browsable API
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] = (
        'rest_framework.renderers.BrowsableAPIRenderer',
        'rest_framework.renderers.JSONRenderer',
    )
    # Enable basic authentication to browse the API
    REST_FRAMEWORK['DEFAULT_AUTHENTICATION_CLASSES'] = (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    )
# used by django-guardian
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # default
    'guardian.backends.ObjectPermissionBackend',
)
# used by django-guardian, as django-guardian supports anonymous user object permissions
# `python manage.py syncdb` will create a User instance for the anonymous user with name AnonymousUser
ANONYMOUS_USER_ID = -1

###############################################################################
## 2.b  CORS Configuration
###############################################################################
CORS_ORIGIN_ALLOW_ALL = False
#CORS_ORIGIN_WHITELIST = (
#    'some domain or IP'
#)
CORS_ALLOW_CREDENTIALS = True
CORS_EXPOSE_HEADERS = (
    'Set-Cookie',
    'Vary',
    'Date'
)

###############################################################################
## 2.c  Websocket configuration
###############################################################################
WEBSOCKET_URL = '/ws/'
WSGI_APPLICATION = 'ws4redis.django_runserver.application'
WS4REDIS_CONNECTION = {
    'host': '@REDIS_HOST@',
    'port': @REDIS_PORT@,
    'db': @REDIS_DB@,
}
WS4REDIS_EXPIRE = 3600
WS4REDIS_HEARTBEAT = '--heartbeat--'
WS4REDIS_PREFIX = 'rodan'

###############################################################################
## 2.d  IIPServer Configuration (if using Diva.js)
###############################################################################
# IIP Server URL
IIPSRV_URL = '/fcgi-bin/iipsrv.fcgi'
# IIP Server FILESYSTEM_PREFIX
IIPSRV_FILESYSTEM_PREFIX = '@RODAN_DATA_DIR@'

###############################################################################
## 2.e  Rodan Development Server Configuration
###############################################################################
# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = ''
# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'
# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)
# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)


###############################################################################
## 3.a  Rodan Worker Configuration
###############################################################################
# Add traceback in RunJob's error detail when it fails.
TRACEBACK_IN_ERROR_DETAIL = True

###############################################################################
## 3.b  Celery Task Queue Configuration
###############################################################################
BROKER_CONNECTION_MAX_RETRIES = '0'
BROKER_URL = '@CELERY_BROKER_URL@'
CELERY_RESULT_BACKEND = "amqp"
CELERY_ENABLE_UTC = True
CELERY_IMPORTS = ("rodan.jobs.load",)
if TEST:
    CELERY_ALWAYS_EAGER=True  # Run Celery task synchronously, instead of sending into queue
    CELERY_EAGER_PROPAGATES_EXCEPTIONS=True  # Propagate exceptions in synchronous task running by default
# Use temporary filesystem to store projects and resources during test
if TEST:
    import tempfile as _tempfile
    MEDIA_ROOT = _tempfile.mkdtemp() + '/'
